//cv的，我没想到这都能二分，判断一遍都需要O(n)，不过总共也才是O(n log n)
//学到细节了，向上取整可以c += (q + mid - 1) / mid。
class Solution {
public:
    int minimizedMaximum(int n, vector<int>& quantities) {
        int left = 0, right = 1e5 + 1;
        auto check = [&](int mid) {
        if (mid == 0) return false;
        int c = 0;
        for (auto q: quantities) {
            c += (q + mid - 1) / mid;
        }
        return c <= n;
    };
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (check(mid)) right = mid;
        else left = mid + 1;
    }
    
    return left;
    }
};
*******************************
我的错误代码，错在了贪心上，举个栗子 15，局部的最优一定是 t/2（8），但是如果还有两个空闲房子，贪心的话就是 8/2=4,然鹅正确答案应该是15/3=5.
//class Solution {
//public:
//	int minimizedMaximum(int n, vector<int>& quantities) {
//		int m = quantities.size();
//		priority_queue<int> p;
//		for (int q : quantities){
//			p.push(q);
//		}
//
//		for (int i = 0; i < m - n; i++){
//			int t = p.top();
//			p.pop();
//			p.push(t / 2);
//			p.push(t - t / 2);
//		}
//
//		return p.top();
//
//	}
//};
