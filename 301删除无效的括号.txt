//区别于官方题解的是，我这个是从有效括号中寻找符合最小长度的，官方题解则是尝试遍历所有可能并进行剪枝，我的这种情况呢就不容易进行剪枝操作了
//代码也写的比较臃肿
class Solution {
public:
	set<string> ans;

	vector<string> removeInvalidParentheses(string s) {
		int n = s.size();
		unordered_map<int, vector<int>> map;
		
		vector<int> sign(n, 0);
		vector<int> temp;
		int r = 0, d = 0;
		for (int i = n - 1; i >= 0; i--){
			if (s[i] == ')'){
				r++;
				temp.push_back(i);
				sign[i] = 1;
			}
			else if (s[i] == '('){
				if (r > 0)r--;
				else d++;
				map[i] = temp;
			}
		}
		d += r;
		string t;
		dfs(s, map, sign, t, d, 0);
		vector<string> ret;
		for (auto str : ans){
			ret.push_back(str);
		}
		return ret;
	}

	void dfs(string& s, unordered_map<int, vector<int>>& map, vector<int>& sign,string& t,int d, int i){
		if (i == s.size()){
			if (t.size() + d == s.size()){
				ans.insert(t);
			}
			return;
		}

		if (s[i] == ')'){
			if (sign[i] == 0){
				t += ')';
			}
			dfs(s, map, sign, t, d, i + 1);
			if (sign[i] == 0){
				t.pop_back();
			}
		}
		else if (s[i] == '('){
			for (int temp : map[i]){
				if (sign[temp] == 0)continue;
				t += '(';
				sign[temp] = 0;
				dfs(s, map, sign, t, d, i + 1);
				sign[temp] = 1;
				t.pop_back();
			}
			dfs(s, map, sign, t, d, i + 1);
		}
		else{
			t += s[i];
			dfs(s, map, sign, t, d, i + 1);
			t.pop_back();
		}

	}
};