class Solution {
public:
    vector<long> getCandidates(const string& n) {
        int len = n.length();
        vector<long> candidates = {
            (long)pow(10, len - 1) - 1,
            (long)pow(10, len) + 1,
        };
        long selfPrefix = stol(n.substr(0, (len + 1) / 2));
        for (int i : {selfPrefix - 1, selfPrefix, selfPrefix + 1}) {
            string prefix = to_string(i);
            string candidate = prefix + string(prefix.rbegin() + (len & 1), prefix.rend());
            candidates.push_back(stol(candidate));
        }
        return candidates;
    }

    string nearestPalindromic(string n) {
        long selfNumber = stol(n), ans = -1;
        const vector<long>& candidates = getCandidates(n);
        for (auto& candidate : candidates) {
            if (candidate != selfNumber) {
                if (ans == -1 ||
                    abs(candidate - selfNumber) < abs(ans - selfNumber) ||
                    abs(candidate - selfNumber) == abs(ans - selfNumber) && candidate < ans) {
                    ans = candidate;
                }
            }
        }
        return to_string(ans);
    }
};



////自己的初步代码 思路跟题解一模一样
/*
class Solution {
public:
	string nearestPalindromic(string n) {
		int len = n.size();
		if (len == 1){
			n[0] -= 1;
			return n;
		}
		vector<string> srr;
		//ji
		if (len % 2){
			string temp = helper(n, len / 2 - 1, 1);
		}
		else{

		}

	}

	string helper(string n, int i, int f){
		int sign = 1;
		if (f){
			while (sign&&i>=0){
				if (n[i] - '0' + sign == 10){
					n[i] = '0';
					i--;
				}
				else{
					n[i] += 1;
					sign = 0;
				}
			}
			if (sign == 1){
				int len = n.size();
				n[0] = '1';
				for (int t = 1; t < len; t++){
					n[t] = '0';
				}
				n.push_back('1');
				
			}
			return n;

		}
		else{
			while (sign&&i >= 0){
				if (n[i] == '0'){
					n[i] = '9';
					i--;
				}
				else{
					n[i] -= 1;
					sign = 0;
				}
			}
			if (n[0]=='0'){
				int len = n.size();
				n = string(len - 1, '9');
				
			}
			return n;
		}

	}
};*/
