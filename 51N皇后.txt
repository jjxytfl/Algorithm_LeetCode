#include<iostream>
#include<string>
#include <vector>
using namespace std;
#define N 100 
#define Empress 2 //皇后
#define NoPlace 0 //
static int countnum = 1;

vector<string>  show(int arr[N][N], int n);
void init(int arr[N][N], int n);
void Nempress(int m_i, int m_j, int m_arr[N][N], int n, vector<vector<string>>& result);

class Solution {
public:
	vector<vector<string>> solveNQueens(int n) {
		vector<vector<string>> result;
		int arr[N][N];
		init(arr, n);
		for (int i = 0; i < n; i++){
			Nempress(0, i, arr, n, result);
		}
		return result;
	}
};
void Nempress(int m_i, int m_j, int m_arr[][N], int n, vector<vector<string>> &result){
	int i, j;
	int arr[N][N];
	for (i = 0; i < n; i++)
	for (j = 0; j < n; j++)
		arr[i][j] = m_arr[i][j];

	for (i = m_i, j = m_j; i < n && j >= 0; i++, j--)arr[i][j] = NoPlace;
	for (i = m_i, j = m_j; i < n && j < n; i++, j++)arr[i][j] = NoPlace;
	for (i = m_i, j = m_j; i < n; i++)arr[i][j] = NoPlace;
	arr[m_i][m_j] = Empress;

	if (n == 1){ result.push_back(show(arr, n)); return; }
	for (i = m_i + 1, j = 0; j < n; j++){
		if (arr[i][j]){
			if (m_i + 1 == n - 1){ arr[i][j] = Empress; result.push_back(show(arr, n)); return; }
			Nempress(i, j, arr, n, result);
		}
	}
}

vector<string> show(int arr[N][N], int n){
	vector<string> result_1;

	if (countnum++ != 1){ cout << ','; }
	cout << '[';
	for (int i = 0; i < n; i++)
	{
		string str;
		cout << '"';
		for (int j = 0; j < n; j++)
		if (arr[i][j] == Empress)
		{
			cout << 'Q'; str += 'Q';
		}
		else { cout << '.'; str += '.'; }
		cout << '"';
		if (i != n - 1){ cout << ','; }
		result_1.push_back(str);
	}
	cout << ']';

	return result_1;
}

void init(int arr[N][N], int n){
	for (int i = 0; i < n; i++)
	for (int j = 0; j < n; j++)
		arr[i][j] = 1;

	for (int j = 0; j < n; j++)
		arr[0][j] = 0;
}

int main(){
	Solution a;
	int n;
	cout << " 请输入棋盘大小 " << endl;
	cin >> n;

	a.solveNQueens(n);

	system("pause");
}