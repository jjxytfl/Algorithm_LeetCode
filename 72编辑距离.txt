#include<iostream>    //动态规划        //    空间复杂度还可以优化  因为dp的值只需要前面一列和上面一排
#include <vector>

using namespace std;

#define min(a,b) (a<b?a:b)

class Solution {
public:
	int minDistance(string word1, string word2) {
		int m = word1.size();
		int n = word2.size();
		if (m == 0 || n == 0){
			return m + n;
		}
		
		int **dp = new int*[m];
		for (int i = 0; i < m; i++){
			dp[i] = new int[n];
		}
		if (word1.at(0) == word2.at(0)){
			dp[0][0] = 0;
		}
		else {
			dp[0][0] = 1;
		}
		for (int i = 1; i < m; i++){
			if(word2.at(0)==word1.at(i))dp[i][0] = i ;
			else dp[i][0] = dp[i-1][0] + 1;
		}
		for (int i = 1; i < n; i++){
			if (word1.at(0) == word2.at(i))dp[0][i] = i;
			else dp[0][i] = dp[0][i-1] + 1;
		}
		for (int i = 1; i < m; i++){
			for (int j = 1; j < n; j++){
				if (word1.at(i) != word2.at(j)){
					dp[i][j] = min(min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1;
				}
				else {
					dp[i][j] = dp[i - 1][j - 1];
				}
			}
		}

		for (int i = 0; i < m; i++){
			for (int j = 0; j < n; j++){
				cout << dp[i][j] << " ";
			}
			cout << endl;
		}

		return dp[m - 1][n - 1];
	}
};



int main()
{
	Solution a;

	string word1 = "park";
	string word2 = "spake";
	
	cout << a.minDistance(word1, word2) << " result " << endl;


	system("pause");
	return 0;
}
