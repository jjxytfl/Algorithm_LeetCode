class Solution {
public:
	bool hasCycle(ListNode *head) {
		if (head == nullptr)return false;
		if (head->next == nullptr)return false;
		ListNode * temphead = head;

		ListNode * q = nullptr;
		ListNode * temp = head;
		ListNode * n = head;

		while (n != nullptr){
			temp = n;

			n = temp->next;
			temp->next = q;
			q = temp;

		}
		return temp == head;
	}
};

//快慢指针是真的妙啊  
class Solution {
public:
    bool hasCycle(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return false;
        }
        ListNode* slow = head;
        ListNode* fast = head->next;
        while (slow != fast) {
            if (fast == nullptr || fast->next == nullptr) {
                return false;
            }
            slow = slow->next;
            fast = fast->next->next;
        }
        return true;
    }
};
